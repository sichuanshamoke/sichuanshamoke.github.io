<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello_world</title>
    <url>/2024/08/10/hello-world/</url>
    <content><![CDATA[<h1 id="新阶段的第一篇博客"><a href="#新阶段的第一篇博客" class="headerlink" title="新阶段的第一篇博客"></a>新阶段的第一篇博客</h1><span id="more"></span>
<p>新的时期开始了！</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>说明</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构第二章-线性表</title>
    <url>/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数据结构第一章-绪论</title>
    <url>/2024/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%AC%E4%B8%80%E7%AB%A0-%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="数据结构第一章-绪论"><a href="#数据结构第一章-绪论" class="headerlink" title="数据结构第一章 绪论"></a>数据结构第一章 绪论</h1><blockquote>
<p>计算机学科基础：数据结构第一章绪论的学习笔记</p>
</blockquote>
<span id="more"></span>
<h2 id="1-数据结构的基本概念"><a href="#1-数据结构的基本概念" class="headerlink" title="1.数据结构的基本概念"></a>1.数据结构的基本概念</h2><ul>
<li>数据</li>
<li>数据元素：<u>数据的基本单位</u>，由若干个数据项组成<br><strong>数据项是不可分割的最小独立数据单位</strong></li>
<li>数据对象：具有相同性质的数据元素的集合，是数据的一个子集</li>
<li>数据类型：数据类型是一个值的集合和定义在此集合上的一组操作的总称<ul>
<li>原子类型：其值不可再分的数据类型。（如bool、int）</li>
<li>结构类型：其值可以再分解为若干成分（分量）的数据类型。(如结构体)</li>
<li><strong>抽象数据类型ADT</strong>：抽象数据组织及与之相关的操作<br>描述了数据的逻辑结构和抽象运算，定义了一个完整的数据结构，如线性表、栈、队列、树、图等）。</li>
</ul>
</li>
<li>数据结构<ul>
<li>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。<br>在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素相互之间的关系称为结构(Structure)</li>
<li>数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。</li>
<li>数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，<br>而算法的实现依赖于所采用的存储结构。</li>
</ul>
</li>
</ul>
<h2 id="2-数据结构的三要素"><a href="#2-数据结构的三要素" class="headerlink" title="2.数据结构的三要素"></a>2.数据结构的三要素</h2><ul>
<li>数据的逻辑结构：数据元素之间的逻辑关系，<strong>数据的逻辑结构独立于其存储结构</strong><ul>
<li>线性结构（数据元素之间只存在一对一的关系）<ul>
<li>一般线性表</li>
<li>受限线性表：栈和队列、串</li>
<li>线性表推广：数组</li>
</ul>
</li>
<li>非线性结构<ul>
<li>集合 （结构中的数据元素之间除“同属一个集合外”，别无其他关系）</li>
<li>树形结构：一般树、二叉树（数据元素之间存在一对多的关系）</li>
<li>图状结构：有向图、无向图（数据元素之间存在多对多的关系）</li>
</ul>
</li>
<li>概念型的例题<ul>
<li>此题选C，逻辑结构均是线性结构</li>
<li><a href="https://imgse.com/i/pCs0g2t"><img src="https://s1.ax1x.com/2023/07/04/pCs0g2t.png" alt="pCs0g2t.png"></a></li>
</ul>
</li>
</ul>
</li>
<li>数据的存储结构：存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。<br>包括数据元素的表示和关系的表示（<strong>存储数据时，不仅要存储各数据元素的值，也要存储数据元素之间的关系</strong>）<ul>
<li>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中（如顺序表）<br>元素之间的关系由存储单元的邻接关系来体现。<ul>
<li>其优点是可以实现随机存取，每个元素占用最少的存储空间</li>
<li>缺点是只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</li>
</ul>
</li>
<li>链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，<br>借助指示元素存储地址的指针来表示元素之间的逻辑关系<ul>
<li>链式存储时，链式存储时各个不同结点的存储空间可以不连续，但结点内的存储单元地址一定连续</li>
<li>链式存储结构比顺序存储结构更能方便地表示各种逻辑结构</li>
<li>其优点是不会出现碎片现象，能充分利用所有存储单元</li>
<li>缺点是每个元素因存储指针而占用额外的存储空间，且只能实现顺序存取。</li>
</ul>
</li>
<li>索引存储：在存储元素信息的同时，还建立附加的索引表。<br>索引表中的每项称为索引项，索引项的一般形式是(关键字，地址)。<ul>
<li>其优点是检索速度快：缺点是附加的索引表额外占用存储空间。</li>
<li>增加和删除数据时也要修改索引表，因而会花费较多的时间。</li>
</ul>
</li>
<li>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希(Hsh)存储。<ul>
<li>其优点是检索、增加和删除结点的操作都很快</li>
<li>缺点是若散列函数不好，则可能出现元素存储单元的冲突，而解决冲突会增加时间和空间开销。</li>
</ul>
</li>
</ul>
</li>
<li>数据的运算：施加在数据上的运算包括运算的定义和实现。<ul>
<li>运算的定义是针对逻辑结构的，指出运算的功能</li>
<li>运算的实现是针对存储结构的，指出运算的具体操作步骤。</li>
<li><strong>不是每种数据结构都具备三种基本运算：插入、删除和查找</strong><br><strong>如栈和队列无法查找，二维数组无法删除</strong></li>
</ul>
</li>
</ul>
<h2 id="3-算法的基本概念"><a href="#3-算法的基本概念" class="headerlink" title="3.算法的基本概念"></a>3.算法的基本概念</h2><ul>
<li>算法的概念：<strong>对特定问题求解步骤的一种描述</strong>，它是指令的有限序列，其中的每条指令表示一个或多个操作。</li>
<li>五个重要特性<ul>
<li>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成</li>
<li>确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出。</li>
<li>可行性：算法中描述的操作都可以通过已经实现的基本运算<u>执行有限次</u>来实现。</li>
<li>输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合。</li>
<li>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量。</li>
</ul>
</li>
<li>四个目标<ul>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>高效率与低存储量需求：效率是指算法执行的时间，存储量需求是指算法执行过程中所需要的最大存储空间，<br>这两者都与问题的规模有关。</li>
</ul>
</li>
</ul>
<h2 id="4-算法效率的度量（✪）"><a href="#4-算法效率的度量（✪）" class="headerlink" title="4.算法效率的度量（✪）"></a>4.算法效率的度量（✪）</h2><ul>
<li><p>时间复杂度</p>
<ul>
<li>一个语句的频度是指该语句在算法中<u>被重复执行的次数</u>。算法中所有语句的频度之和记为T(n)，<br><u>它是该算法问题规模n的函数</u>，时间复杂度主要分析T(n)的<u>数量级</u>，<strong>执行时间与时间复杂度的值成正比</strong>。</li>
<li>算法中基本运算（<strong>最深层循环内的语句</strong>）的频度与T(n)同数量级，<br><strong>因此通常采用算法中基本运算的频度f(n)来分析时间复杂度</strong>，$T ( n ) = O ( f ( n ) )$<ul>
<li>如此题中，问题规模始终都是n，执行时间与时间复杂度的值成正比，选C<ul>
<li><a href="https://imgse.com/i/pCse6aQ"><img src="https://s1.ax1x.com/2023/07/04/pCse6aQ.png" alt="pCse6aQ.png"></a></li>
</ul>
</li>
<li>此题可以反映时间复杂度是看问题规模的数量级（即看最高阶，抓大头选B）<ul>
<li><a href="https://imgse.com/i/pCsKhY4"><img src="https://s1.ax1x.com/2023/07/04/pCsKhY4.png" alt="pCsKhY4.png"></a></li>
</ul>
</li>
<li>但是有两个变量的话就不一样了，如此题选C<ul>
<li><a href="https://imgse.com/i/pPMMWOs"><img src="https://s1.ax1x.com/2023/08/14/pPMMWOs.png" alt="pPMMWOs.png"></a></li>
</ul>
</li>
</ul>
</li>
<li><strong>算法的时间复杂度不仅依赖于问题的规模，也取决于待输入数据的性质（如输入数据元素的初始状态)</strong></li>
</ul>
</li>
<li><p>空间复杂度：算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它是问题规模n的函数。</p>
</li>
<li><p>关于时间复杂度的例题（♚）</p>
<ul>
<li>步骤：首先确定循环中变化的值，之后跟据其变化情况列出其经过每轮循环之后的值<br>（先用实数，最后写出规律式（含频数k）），之后并与问题规模n组成不等式，最后求出k关于n的表达式</li>
<li>例1<ul>
<li>此时写出i的变化规律：$1,2,4…2^{k},2^{k}=n,k=log_{2}n$</li>
<li><a href="https://imgse.com/i/pCsnQ0O"><img src="https://s1.ax1x.com/2023/07/04/pCsnQ0O.png" alt="pCsnQ0O.png"></a></li>
</ul>
</li>
<li>例2<ul>
<li>此时写出x的变化规律：$4,8,16…2^{k+1},2^{k+1}&lt;n/2,k=log_{2}n/2-1=log_{2}n-2$，此时即选A</li>
<li><a href="https://imgse.com/i/pCsu8bT"><img src="https://s1.ax1x.com/2023/07/04/pCsu8bT.png" alt="pCsu8bT.png"></a></li>
</ul>
</li>
<li>例3<ul>
<li>此时有内外两层的循环，且外层循环的值决定了内层循环的次数，应该以外层为基准来看</li>
<li>外层执行第一轮(i=1)：最内层语句执行2次，外层执行第二轮(i=2)，最内层语句执行4次，<br>外层执行第三轮(i=3)，最内层语句执行6次，</li>
<li>此时有规律得（外层执行第n轮时，最内层语句执行2n次）总次数即为相加（求和公式(2+2n)*n/2)=n(n+1)）</li>
<li><a href="https://imgse.com/i/pCsKneK"><img src="https://s1.ax1x.com/2023/07/04/pCsKneK.png" alt="pCsKneK.png"></a></li>
</ul>
</li>
<li><p>例4</p>
<ul>
<li><p>先看外层的循环取值</p>
</li>
<li><p>此时有$i=1,2,4……2^{k}&lt;n ，此时对应的内层总次数相加为1+2+……2^{k}=2^{k+1}-1&lt;2n$，时间复杂度为n</p>
</li>
<li><p><a href="https://imgse.com/i/pCs3Arn"><img src="https://s1.ax1x.com/2023/07/04/pCs3Arn.png" alt="pCs3Arn.png"></a></p>
</li>
</ul>
</li>
<li><p>例5</p>
<ul>
<li><p>此时有两层循环但是内层循环的次数不由外层循环的值确定，此时可以看做两个单独的循环，总次数即为此两次循环的积，选C</p>
</li>
<li><p><a href="https://imgse.com/i/pCsKsln"><img src="https://s1.ax1x.com/2023/07/04/pCsKsln.png" alt="pCsKsln.png"></a></p>
</li>
</ul>
</li>
<li><p>例6</p>
<ul>
<li><p>将表达式简化后写出规律，i=0时，sum=1；i=1，sum=1+2，i=2，sum=1+2+3，则i=k时，sum=(1+k)k/2=n，此时选B</p>
</li>
<li><p><a href="https://imgse.com/i/pCslT6s"><img src="https://s1.ax1x.com/2023/07/04/pCslT6s.png" alt="pCslT6s.png"></a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础学习笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
